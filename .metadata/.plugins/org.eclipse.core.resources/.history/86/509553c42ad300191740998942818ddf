import java.util.HashMap;
import java.util.HashSet;

import javax.xml.crypto.dsig.keyinfo.KeyValue;

public class myPow {
    public double myPow(double x, int n) {
        
    	if(x==0) {
    		return 0;
    	}
    	if(n ==0 ) {
    		return 1;
    	}
    	
    	double sign = 1;
    	
    	
    	if(x<0) {
    		if(n%2!=0) {
    			sign = -1;
        	}
    	}
    	x = Math.abs(x);
    	
    	

    	HashMap<Integer, Double> hashMap = new HashMap<Integer, Double>();
    	
    	
    	int temp =Math.abs(n);
    	if(n>0)
    	{
    		hashMap.put(1, x);
    	}
    	else
    	{
    		hashMap.put(1, 1/x);
    	}
    	int start = 2;
    	while(start<=temp) {
    		if(!(hashMap.containsKey(start))) {
        		int key = start/2;
        		double val = hashMap.get(key)*hashMap.get(key);
        		//double val  =0;
        		hashMap.put(start, val);
        		start = start*2;
        	}
    	}
    	
    	
    	for(Integer val: hashMap.keySet()) {
    		
    		System.out.println(val+"->" + hashMap.get(val));
    	}
    	double res = 1;
    	
//    	while(temp!=0) {
//    		res *= n>0?x:(1/x);
//    		temp--;
//    	}
    	return res*sign;
    }
    
    public static void main(String[] args) {
    	new myPow().myPow(2, -100);
		System.out.println();
	}
}
